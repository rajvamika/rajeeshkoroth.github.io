---
layout: post
title:  "Microservices, DDD, Agile development- What is the connection!"
date:   2016-11-04 08:36:28 +0530
categories: jekyll update disqus
comments: true
---

Microservice is not a new concept. The Unix philosophy of one tool, one job and perform its job well is inherent to its utility tools and commands. The same rules applies to `functions`; an ubiqutous `organization block` in programming languages; which states that function should be as small to do one job at a time and should do only what the `function name` denotes. When SOA and ESB came in integration space, it has clearly defined set of rules. Most of those rules are applicable for Microservices as well. However, the current prominence of Microservice are due to massive Cloud adoption, a need for real time systems in BigData related projects and IoT applications.

The first and foremost attribute of Microservices implementation is to identify the problem domain which can be achieved through Domain Driven Design. Traditional agile software development focus on the Application development practices instead of understanding the problem domain during the initial phase. Development team identifies the task to work based on User Stories and Use Case aggregation exercise.

In an urge to develop the feature list developers often skip the conversation needed on the shared understanding of the business; instead they favor the technical discussion and jump straight into the implementation, losing an opportunity identify the domain model.

For example a Travel booking site may identify these user stories to perform for a given week for its developers:

1. Allows customer to search based on date and display the results.
2. Choose from list and performs booking on it.
3. Once booking is confirmed he will taken to the payment site.
4. Upon making the payment ticket will be issued.

The development is focussed on application areas. If you look it clearly, those four tasks belongs to different domains like:

1. Allows customer to search based on date and display the results - `Search`.
2. From the list, customer choose a flight and performs booking on it - `Booking`.
3. Once booking is confirmed, he will taken to the payment site - `Payment`.
4. Upon making the payment, ticket will be issued - `Ticketing`.  

The friction between Agile practices and Domain Driven Design is on the need to be agile and agility practices the former plays. During the `requirement gathering` phase identify the Domain and the events occurs on that domain - use those information to derive a Bounded Context. In an essence, before breaking into User Stories derive the Domain areas to work with. Use the Impact Mapping, Model Exploration Whirlpool, and Event Storming to formulate a Domain. However, lately, it is `Event Storming` seems to be choice to derive the Domain model as it allows the direct representation of designed events in actual coding. We will discuss on that later.

Once the subdomains are represented into  domain model then try to segregate the domain model into three:

* <b>Core subdomain.</b>
* <b>Supporting subdomain.</b>
* <b>Generic subdomain.</b>

![subdomains]({{ site.url }}/assets/ddesign-subdomain.jpg)

For any business `Core subdomain` provides the intellectual property or it will be considered its competitive advantage.
The maximum focus should be given on `Core subdomain`. Sometimes after Domain modeling, it comes out that there won't be any `Core subdomain`; those `domain(s)` operated on business are merely doing the integration job. In a Travel booking application, its `Search/Pricing` can be considered as the Core Domain. Those two domains may be what provides the `Value Proposition` to their business.

A `Supporting subdomain` primary focus is to support `Core subdomain`. `Core subdomain` can't exist without them but business shouldn't focus much on that. For example Payment domain may depend a third party payment service provider or a Notification domain service may use third party email service to send out emails/sms. So business devoid the necessity to focus much effort on those areas. Nevertheless, their existence is important for the `Core subdomain` to function.

Essentially, a `Generic subdomain` is isolated from both `Core subdomain` and `Supporting subdomain` and can function independently. But to operate as a whole business its presence is inevitable. An example would be the CustomerSupport subdomain. Generally `Generic subdomain` is outsourced or may be a packages/SaaS software.

Generally there is a one-to-one mapping between a Domain model and Subdomain and they operate on its own Context known as Bounded Context. Multiple Bounded Contexts are not uncommon. These Bounded Context can exist its own, in other words it store its own Data and can operate independently. In some cases a Bounded Context may overlap into other subdomains. And Bounded Context will be considered for Microservices.

Once Subdomains and Bounded Contexts are identified the next phase would be recognizing the interfaces of the Bounded Context. DDD call it as Context Map which will lead to a discussion on the integration approach.

The next article will provide more on Bounded Context and Integration among Bounded Contexts.

{% if page.comments %}
 <div id="disqus_thread"></div>
 <script>

/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
/*
var disqus_config = function () {
this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = '//rajeeshkorothcom.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>

 {% endif %}
